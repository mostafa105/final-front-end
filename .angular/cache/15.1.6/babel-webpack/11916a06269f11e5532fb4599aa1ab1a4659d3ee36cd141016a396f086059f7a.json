{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { fade, showfilter, showaddquestion, fadein } from '../../animation';\nlet PostsComponent = class PostsComponent {\n  constructor(service) {\n    this.service = service;\n    // filter\n    this.setwidth = \"\";\n    this.alighnfilter = \"right\";\n    this.alighntrack = 'right';\n    this.visible = 'false';\n    this.searchFilterTrack = '';\n    this.ser = \"\";\n    // add Question\n    this.success = false;\n    // user_id = '3'\n    this.subtrack_name = \"\";\n    // qutestionview\n    this.list = [];\n    this.textupdatequestion = \"\";\n    this.bodyupdatequestion = \"\";\n    this.bodynewqcomment = [];\n    this.bodynewreply = [];\n    this.textupdateqcomment = \"\";\n    this.textupdatereply = \"\";\n    this.bodyupdatereply = \"\";\n    this.bodyupdateqcomment = '';\n    this.SQComments = \"\";\n    this.page = 1;\n    this.count = 0;\n    this.tableSize = 5;\n    this.tableSizes = [3, 6, 9, 12];\n  }\n  ngOnInit() {\n    this.user_logend = localStorage.getItem('user');\n    this.user_logend = JSON.parse(this.user_logend);\n    this.refresh();\n    this.formAddQuestion = this.AddQuestionValidate();\n  }\n  refresh() {\n    this.getQuestion();\n  }\n  search(search) {\n    let qusetuinsearch = search?.target?.value;\n    this.service.search(qusetuinsearch).subscribe(res => {\n      this.list = res.data;\n    });\n  }\n  displaysearch() {\n    if (this.setwidth == \"\") {\n      this.setwidth = \"setwidth\";\n    } else {\n      this.setwidth = \"\";\n    }\n    ;\n  }\n  // endfilter\n  // Addquestion\n  removeformdata() {\n    this.formAddQuestion = this.AddQuestionValidate();\n  }\n  AddQuestionValidate() {\n    return new FormGroup({\n      body: new FormControl('', [Validators.required, Validators.minLength(10)]),\n      instructor_id: new FormControl(this.user_logend.id, [Validators.required])\n    });\n  }\n  savequestion() {\n    console.log(this.formAddQuestion.value);\n    if (this.formAddQuestion.valid) {\n      console.log(this.formAddQuestion.value);\n      this.service.setPost(this.formAddQuestion.value).subscribe(res => {\n        if (res) {}\n      });\n      this.refresh();\n      this.removeformdata();\n    }\n  }\n  getQuestion() {\n    this.service.getPosts().subscribe(res => {\n      this.list = res.data;\n      // console.log(this.list)\n    });\n  }\n\n  onTableDataChange(event) {\n    this.page = event;\n    this.getQuestion();\n  }\n  onTableSizeChange(event) {\n    this.tableSize = event.target.value;\n    this.page = 1;\n    this.getQuestion();\n  }\n  updatequestionbyid(id) {\n    this.service.updatePost(id, this.bodyupdatequestion).subscribe(res => {\n      if (res) {\n        this.addupdatedtoquestions();\n      }\n    });\n    this.visibleupdatequestion('-1', \"-1\");\n    this.bodyupdatequestion = '';\n  }\n  // to visible question update model\n  visibleupdatequestion(question_id, body) {\n    this.bodyupdatequestion = body;\n    if (this.textupdatequestion) {\n      this.textupdatequestion = '';\n    } else {\n      this.textupdatequestion = question_id;\n    }\n  }\n  // to add new update question in the page\n  addupdatedtoquestions() {\n    this.refresh();\n    this.bodyupdatequestion = \"\";\n  }\n  // q comment\n  addnewqcomment(user_id, question_id) {\n    this.service.setcomment(question_id, this.bodynewqcomment[question_id], user_id).subscribe(res => {\n      if (res) {\n        this.bodynewqcomment[question_id] = \"\";\n        this.refresh();\n      }\n    });\n  }\n  updateqcommentbyid(id) {\n    this.service.updatecomment(id, this.bodyupdateqcomment).subscribe(res => {\n      if (res) {\n        this.refresh();\n      }\n    });\n    this.visiabletextupdateqcomment('-1', \"-1\");\n    this.bodyupdateqcomment = '';\n  }\n  deletequestionbyid(question_id) {\n    if (confirm('Are You Sure To Delete This question?')) {\n      this.service.deletePost(question_id).subscribe(res => {\n        this.refresh();\n      });\n    }\n  }\n  deleteqcommentbyid(qcomment_id) {\n    if (confirm('Are You Sure To Delete This Comment?')) {\n      this.service.deletecomment(qcomment_id).subscribe(res => {\n        this.refresh();\n      });\n    }\n  }\n  getcomments(question_id) {\n    console.log(question_id);\n    if (question_id) {\n      if (question_id == this.SQComments) {\n        this.SQComments = \"\";\n      } else {\n        this.SQComments = question_id;\n      }\n    } else {\n      this.SQComments = question_id;\n    }\n  }\n  visiabletextupdateqcomment(qcomment_id, body) {\n    if (this.textupdateqcomment) {\n      this.textupdateqcomment = '';\n    } else {\n      this.textupdateqcomment = qcomment_id;\n      this.bodyupdateqcomment = body;\n    }\n  }\n  trackquetion(index, question) {\n    return question.id;\n  }\n  trackqcomment(index, qcomment) {\n    return qcomment.id;\n  }\n};\nPostsComponent = __decorate([Component({\n  selector: 'app-posts',\n  templateUrl: './posts.component.html',\n  styleUrls: ['./posts.component.css'],\n  animations: [fade, showfilter, showaddquestion, fadein]\n})], PostsComponent);\nexport { PostsComponent };","map":{"version":3,"mappings":"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","names":["Component","FormControl","FormGroup","Validators","fade","showfilter","showaddquestion","fadein","PostsComponent","constructor","service","ngOnInit","user_logend","localStorage","getItem","JSON","parse","refresh","formAddQuestion","AddQuestionValidate","getQuestion","search","qusetuinsearch","target","value","subscribe","res","list","data","displaysearch","setwidth","removeformdata","body","required","minLength","instructor_id","id","savequestion","console","log","valid","setPost","getPosts","onTableDataChange","event","page","onTableSizeChange","tableSize","updatequestionbyid","updatePost","bodyupdatequestion","addupdatedtoquestions","visibleupdatequestion","question_id","textupdatequestion","addnewqcomment","user_id","setcomment","bodynewqcomment","updateqcommentbyid","updatecomment","bodyupdateqcomment","visiabletextupdateqcomment","deletequestionbyid","confirm","deletePost","deleteqcommentbyid","qcomment_id","deletecomment","getcomments","SQComments","textupdateqcomment","trackquetion","index","question","trackqcomment","qcomment","selector","templateUrl","styleUrls","animations"],"sourceRoot":"","sources":["C:\\Users\\lenovo\\Desktop\\new\\Final-Project-Front-End\\src\\app\\user\\userhome\\posts\\posts.component.ts"],"sourcesContent":["\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { fade, showfilter, showaddquestion, fadein } from '../../animation';\nimport { PostsService } from '../../services/posts.service';\nimport { UserHomeService } from '../../services/user-home.service';\n\n@Component({\n  selector: 'app-posts',\n  templateUrl: './posts.component.html',\n  styleUrls: ['./posts.component.css'],\n  animations: [fade, showfilter, showaddquestion, fadein],\n})\nexport class PostsComponent {\n\n    // filter\n    setwidth:string = \"\";\n    alighnfilter = \"right\";\n    alighntrack = 'right';\n    visible = 'false'\n    searchFilterTrack:string ='';\n    ser =\"\"\n  \n  \n    // add Question\n    success = false ;\n    // user_id = '3'\n    subtrack_name= \"\";\n    subtracks : any ;\n    public formAddQuestion!: FormGroup ;\n  \n  \n  \n    // qutestionview\n    list :any=[] ;\n    textupdatequestion =\"\";\n    bodyupdatequestion = \"\";\n    bodynewqcomment:string[]=[];\n    bodynewreply:string[]=[];\n    textupdateqcomment=\"\";\n    textupdatereply=\"\";\n    bodyupdatereply=\"\";\n    bodyupdateqcomment = '';\n    SQComments:string=\"\";\n    page: number = 1;\n    count: number = 0;\n    tableSize: number = 5;\n    tableSizes: any = [3, 6, 9, 12];\n    user_logend:any;\n\n  \n    constructor(private service :PostsService ){}\n    ngOnInit(){\n      this.user_logend = localStorage.getItem('user');\n      this.user_logend =JSON.parse(this.user_logend) \n      this.refresh();\n      this.formAddQuestion= this.AddQuestionValidate();\n    }\n  \n    refresh(){\n      this.getQuestion();\n    }\n  \n    search(search:Event){\n      let qusetuinsearch =(search?.target as HTMLInputElement)?.value ;\n       this.service.search(qusetuinsearch).subscribe(res=>{\n        this.list = res.data ; \n       })\n     }\n\n    \n      displaysearch(){\n        if(this.setwidth==\"\"){\n          \n          this.setwidth = \"setwidth\"\n        }else{\n          this.setwidth = \"\"\n          \n        };\n    \n      }\n    \n      // endfilter\n  \n      // Addquestion\n  \n      removeformdata(){\n        this.formAddQuestion= this.AddQuestionValidate();\n      }\n    \n      private AddQuestionValidate():FormGroup {\n        return new FormGroup({\n          body: new FormControl('',[Validators.required,Validators.minLength(10)]),\n          instructor_id:new FormControl(this.user_logend.id,[Validators.required])\n        })\n      }\n    \n       savequestion(){\n        console.log(this.formAddQuestion.value)\n        if(this.formAddQuestion.valid){\n          console.log(this.formAddQuestion.value)\n          this.service.setPost(this.formAddQuestion.value).subscribe(res=>{if(res){\n\n          }} )\n          this.refresh();\n          this.removeformdata()\n        }\n       }\n    \n    \n  \n\n    getQuestion(){\n      this.service.getPosts().subscribe(res =>  { this.list = res.data\n      // console.log(this.list)\n     }) ;\n  \n    }\n\n    onTableDataChange(event: any) {\n      this.page = event;\n      this.getQuestion();\n    }\n    onTableSizeChange(event: any): void {\n      this.tableSize = event.target.value;\n      this.page = 1;\n      this.getQuestion();\n    }\n  \n\n  updatequestionbyid(id:string){\n    this.service.updatePost(id,this.bodyupdatequestion).subscribe(res=>  { if(res){this.addupdatedtoquestions()} }) ;\n    this.visibleupdatequestion('-1',\"-1\");\n    this.bodyupdatequestion = ''\n  }\n  // to visible question update model\n  visibleupdatequestion(question_id:string,body:string){\n    this.bodyupdatequestion =body ;\n    if(this.textupdatequestion){\n      this.textupdatequestion = ''\n    }else{\n      this.textupdatequestion = question_id;\n    }\n  }\n  \n  // to add new update question in the page\n  private addupdatedtoquestions(){\n    \n      this.refresh()\n      this.bodyupdatequestion = \"\";\n   }\n    // q comment\n  \n  \n    addnewqcomment(user_id:string,question_id:number){\n      this.service.setcomment(question_id,this.bodynewqcomment[question_id],user_id)\n      .subscribe(res =>{if(res){\n        this.bodynewqcomment[question_id]=\"\";\n        this.refresh()\n      }});\n  \n     }\n  \n  updateqcommentbyid(id:string){\n    this.service.updatecomment(id,this.bodyupdateqcomment).subscribe(res=>  { if(res){this.refresh() }}) ;\n    this.visiabletextupdateqcomment('-1',\"-1\");\n    this.bodyupdateqcomment = ''\n    \n  }\n  \n\n   deletequestionbyid(question_id:string){\n    if(confirm('Are You Sure To Delete This question?')){\n      this.service.deletePost(question_id).subscribe(res =>  { this.refresh() }) ;\n    }\n   }\n  \n   deleteqcommentbyid(qcomment_id:string){\n    if(confirm('Are You Sure To Delete This Comment?')){\n      this.service.deletecomment(qcomment_id).subscribe(res =>  { this.refresh() }) ;\n    }\n  }\n\n  getcomments(question_id: string) {\n    console.log(question_id)\n    if (question_id) {\n      if (question_id == this.SQComments) {\n        this.SQComments = \"\";\n      } else {\n        this.SQComments = question_id;\n      }\n    } else {\n      this.SQComments = question_id;\n    }\n  }\n  \n    visiabletextupdateqcomment(qcomment_id:string, body: string){\n\n      if(this.textupdateqcomment){\n        this.textupdateqcomment = ''\n      }else{\n        this.textupdateqcomment = qcomment_id;\n        this.bodyupdateqcomment =body;\n      }\n    }\n  \n     trackquetion(index: number, question:any): string {  \n      return question.id;  \n    } \n  \n    trackqcomment(index: number, qcomment:any): string {  \n      return qcomment.id;  \n    } \n  \n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}