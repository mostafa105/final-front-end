{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserHomeService {\n  constructor(HttpClient) {\n    this.HttpClient = HttpClient;\n    this.api_key = localStorage.getItem('token');\n    this.headers = new HttpHeaders({\n      'Accept': 'application/json',\n      'Authorization': `Bearer ${this.api_key}`\n    });\n    this.requestOptions = {\n      headers: this.headers\n    };\n  }\n  addquestion(data) {\n    return this.HttpClient.post('http://127.0.0.1:8000/api/questions/store', data, this.requestOptions);\n  }\n  addnewqcomment(body, user_id, question_id) {\n    return this.HttpClient.post('http://127.0.0.1:8000/api/qcomments', {\n      'qcomment_body': body,\n      'instructor_id': user_id,\n      'question_id': question_id\n    }, this.requestOptions);\n  }\n  addnewreply(body, user_id, qcomment_id) {\n    return this.HttpClient.post('http://127.0.0.1:8000/api/replies/store', {\n      'reply_body': body,\n      'user_id': user_id,\n      'qcomment_id': qcomment_id\n    });\n  }\n  updatequestionbyid(id, body, subtrack_id) {\n    return this.HttpClient.put('http://127.0.0.1:8000/api/questions/update/' + id, {\n      'question_body': body,\n      'subtrack_id': subtrack_id\n    });\n  }\n  updateqcommentbyid(id, body) {\n    return this.HttpClient.put('http://127.0.0.1:8000/api/qcomments/' + id, {\n      'qcomment_body': body\n    });\n  }\n  updatereplybyid(id, body) {\n    return this.HttpClient.put('http://127.0.0.1:8000/api/replies/update/' + id, {\n      'reply_body': body\n    });\n  }\n  deletequestionbyid(question_id) {\n    return this.HttpClient.delete('http://127.0.0.1:8000/api/questions/delete/' + question_id);\n  }\n  deleteqcommentbyid(qcommetn_id) {\n    return this.HttpClient.delete('http://127.0.0.1:8000/api/qcomments/' + qcommetn_id);\n  }\n  deletereplybyid(reply_id) {\n    return this.HttpClient.delete('http://127.0.0.1:8000/api/replies/delete/' + reply_id);\n  }\n  showquestion() {\n    return this.HttpClient.get('http://127.0.0.1:8000/api/questions');\n  }\n  getquestionbyuser(userid) {\n    return this.HttpClient.get(`http://127.0.0.1:8000/api/getquestionbyuser/${userid}`);\n  }\n  showquestionbyuser(user_id) {\n    return this.HttpClient.get('http://127.0.0.1:8000/api/getquestionbyuser/' + user_id);\n  }\n  search(searchquestions) {\n    return this.HttpClient.get(`http://127.0.0.1:8000/api/searchquestions/${searchquestions}`);\n  }\n  showfilter(subtrack) {\n    return this.HttpClient.get('http://127.0.0.1:8000/api/filterquestions/' + subtrack);\n  }\n  showcomment() {\n    return this.HttpClient.get('http://127.0.0.1:8000/api/qcomments');\n  }\n  showreply() {\n    return this.HttpClient.get('http://127.0.0.1:8000/api/replies');\n  }\n  showsubtrack() {\n    return this.HttpClient.get('http://127.0.0.1:8000/api/subtracks');\n  }\n  setlike(comment_id, user_id) {\n    return this.HttpClient.post('http://127.0.0.1:8000/api/likes', {\n      'qcomment_id': comment_id,\n      'user_id': user_id\n    });\n  }\n  removelike(like_id) {\n    return this.HttpClient.delete('http://127.0.0.1:8000/api/likes/like_id');\n  }\n}\nUserHomeService.ɵfac = function UserHomeService_Factory(t) {\n  return new (t || UserHomeService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserHomeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserHomeService,\n  factory: UserHomeService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","UserHomeService","constructor","HttpClient","localStorage","getItem","api_key","headers","addquestion","data","post","requestOptions","addnewqcomment","body","user_id","question_id","addnewreply","qcomment_id","updatequestionbyid","id","subtrack_id","put","updateqcommentbyid","updatereplybyid","deletequestionbyid","delete","deleteqcommentbyid","qcommetn_id","deletereplybyid","reply_id","showquestion","get","getquestionbyuser","userid","showquestionbyuser","search","searchquestions","showfilter","subtrack","showcomment","showreply","showsubtrack","setlike","comment_id","removelike","like_id","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\lenovo\\Desktop\\new\\Final-Project-Front-End\\src\\app\\user\\services\\user-home.service.ts"],"sourcesContent":["import { showfilter } from './../animation';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n\n})\nexport class UserHomeService {\n\n  constructor(private HttpClient :HttpClient) { }\n  api_key=localStorage.getItem('token');\n\nheaders = new HttpHeaders({\n  'Accept': 'application/json',\n  'Authorization': `Bearer ${this.api_key}`\n});\nrequestOptions= { headers:this.headers };\n\n  addquestion(data:Object): Observable<any>{\n  return  this.HttpClient.post('http://127.0.0.1:8000/api/questions/store',data , this.requestOptions);\n  }\n\n  addnewqcomment(body:string ,user_id:string,question_id:number): Observable<any>{\n    return  this.HttpClient.post('http://127.0.0.1:8000/api/qcomments',{'qcomment_body':body,'instructor_id':user_id,'question_id':question_id} , this.requestOptions);\n\n  }\n\n  addnewreply(body:string ,user_id:string,qcomment_id:number): Observable<any>{\n    return  this.HttpClient.post('http://127.0.0.1:8000/api/replies/store',{'reply_body':body,'user_id':user_id,'qcomment_id':qcomment_id});\n  }\n\n  updatequestionbyid(id:string,body:string,subtrack_id:string): Observable<any>{\n    return  this.HttpClient.put('http://127.0.0.1:8000/api/questions/update/'+id,{'question_body':body,'subtrack_id':subtrack_id});\n  }\n\n  updateqcommentbyid(id:string,body:string): Observable<any>{\n    return  this.HttpClient.put('http://127.0.0.1:8000/api/qcomments/'+id,{'qcomment_body':body ,});\n    }\n\n  updatereplybyid(id:string,body:string): Observable<any>{\n    return  this.HttpClient.put('http://127.0.0.1:8000/api/replies/update/'+id,{'reply_body':body ,});\n    }\n\n    deletequestionbyid(question_id:string): Observable<any>{\n      return this.HttpClient.delete('http://127.0.0.1:8000/api/questions/delete/'+question_id);\n     }\n\n     deleteqcommentbyid(qcommetn_id:string): Observable<any>{\n      return this.HttpClient.delete('http://127.0.0.1:8000/api/qcomments/'+qcommetn_id);\n     }\n\n     deletereplybyid(reply_id:string): Observable<any>{\n      return this.HttpClient.delete('http://127.0.0.1:8000/api/replies/delete/'+reply_id);\n     }\n\n  showquestion(): Observable<any>{\n    return  this.HttpClient.get<any>('http://127.0.0.1:8000/api/questions');\n  }\n\n  getquestionbyuser(userid:any): Observable<any>{\n    return this.HttpClient.get<any>(`http://127.0.0.1:8000/api/getquestionbyuser/${userid}` );\n  }\n\n  showquestionbyuser(user_id:string): Observable<any>{\n    return  this.HttpClient.get<any>('http://127.0.0.1:8000/api/getquestionbyuser/'+user_id);\n  }\n\n  search(searchquestions:any): Observable<any>{\n    return this.HttpClient.get<any>(`http://127.0.0.1:8000/api/searchquestions/${searchquestions}` );\n  }\n  \n\n\n  showfilter(subtrack:string): Observable<any>{\n    return  this.HttpClient.get<any>('http://127.0.0.1:8000/api/filterquestions/'+subtrack);\n  }\n  showcomment(): Observable<any>{\n    return  this.HttpClient.get('http://127.0.0.1:8000/api/qcomments');\n  }\n\n\n  showreply(): Observable<any>{\n    return  this.HttpClient.get('http://127.0.0.1:8000/api/replies');\n  }\n\n\n  showsubtrack(): Observable<any>{\n    return  this.HttpClient.get('http://127.0.0.1:8000/api/subtracks');\n  }\n\n  setlike(comment_id:string,user_id:string): Observable<any>{\n    return this.HttpClient.post('http://127.0.0.1:8000/api/likes',{'qcomment_id':comment_id ,'user_id':user_id })\n  }\n  removelike(like_id:string): Observable<any>{\n    return this.HttpClient.delete('http://127.0.0.1:8000/api/likes/like_id')\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}