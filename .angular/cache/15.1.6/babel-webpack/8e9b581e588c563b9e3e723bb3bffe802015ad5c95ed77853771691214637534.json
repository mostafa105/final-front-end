{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { fade, showfilter, showaddquestion, fadein } from \"../../animation\";\nlet QuestionsviewComponent = class QuestionsviewComponent {\n  constructor(service) {\n    this.service = service;\n    // filter\n    this.setwidth = \"\";\n    this.alighnfilter = \"right\";\n    this.alighntrack = \"right\";\n    this.visible = \"false\";\n    this.searchFilterTrack = \"\";\n    this.ser = \"\";\n    // add Question\n    this.success = false;\n    this.subtrack_name = \"\";\n    // qutestionview\n    this.list = [];\n    this.textupdatequestion = \"\";\n    this.bodyupdatequestion = \"\";\n    this.subtrack_id = \"\";\n    this.bodynewqcomment = [];\n    this.bodynewreply = [];\n    this.textupdateqcomment = \"\";\n    this.textupdatereply = \"\";\n    this.bodyupdatereply = \"\";\n    this.bodyupdateqcomment = \"\";\n    this.SQComments = \"\";\n    this.SQCReplies = \"\";\n    this.page = 1;\n    this.count = 0;\n    this.tableSize = 5;\n    this.tableSizes = [3, 6, 9, 12];\n  }\n  ngOnInit() {\n    this.user_logened = localStorage.getItem(\"user\");\n    this.user_logened = JSON.parse(this.user_logened);\n    this.showsubtracks();\n    this.refresh();\n    this.formAddQuestion = this.AddQuestionValidate();\n  }\n  refresh() {\n    this.getQuestion();\n  }\n  search(search) {\n    let qusetuinsearch = search?.target?.value;\n    this.service.search(qusetuinsearch).subscribe(res => {\n      this.list = res.data;\n    });\n  }\n  like(comment_id, like_id, like_user_id) {\n    if (like_user_id == this.user_logened.id) {\n      this.service.removelike(like_id).subscribe(res => {\n        this.refresh();\n      });\n    } else {\n      this.service.setlike(comment_id, this.user_logened.id).subscribe(res => {\n        this.refresh();\n      });\n    }\n  }\n  showfilter(value) {\n    let subtrack_id = value?.target?.value;\n    if (subtrack_id != undefined) {\n      this.service.showfilter(subtrack_id).subscribe(res => {\n        this.list = res.data;\n        console.log(this.list);\n      });\n      console.log(subtrack_id);\n    } else {\n      this.refresh();\n    }\n  }\n  displaysearch() {\n    if (this.setwidth == \"\") {\n      this.setwidth = \"setwidth\";\n    } else {\n      this.setwidth = \"\";\n    }\n  }\n  setalighnfilter(id) {\n    if (this.alighnfilter == \"right\") {\n      this.alighnfilter = \"down\";\n    } else {\n      this.showfilter(id);\n      this.alighnfilter = \"right\";\n    }\n  }\n  viewtrack() {\n    if (this.visible == \"false\") {\n      this.visible = \"true\";\n    } else {\n      this.visible = \"false\";\n    }\n  }\n  // endfilter\n  // Addquestion\n  removeformdata() {\n    this.formAddQuestion = this.AddQuestionValidate();\n  }\n  AddQuestionValidate() {\n    return new FormGroup({\n      question_body: new FormControl(\"\", [Validators.required, Validators.minLength(10)]),\n      subtrack_id: new FormControl(\"\", [Validators.required]),\n      user_id: new FormControl(\"3\", [Validators.required])\n    });\n  }\n  savequestion() {\n    console.log(this.formAddQuestion.value);\n    if (this.formAddQuestion.valid) {\n      console.log(this.formAddQuestion.value);\n      this.service.addquestion(this.formAddQuestion.value).subscribe(res => {\n        this.refresh();\n        this.removeformdata();\n      });\n    }\n  }\n  // end add question\n  // to get all question\n  getQuestion() {\n    this.service.showquestion().subscribe(res => {\n      this.list = res.data;\n    });\n  }\n  onTableDataChange(event) {\n    this.page = event;\n    this.getQuestion();\n  }\n  onTableSizeChange(event) {\n    this.tableSize = event.target.value;\n    this.page = 1;\n    this.getQuestion();\n  }\n  // to excute the question updateting in database\n  updatequestionbyid(id) {\n    this.service.updatequestionbyid(id, this.bodyupdatequestion, this.subtrack_id).subscribe(res => {\n      if (res) {\n        this.addupdatedtoquestions();\n      }\n    });\n    this.visibleupdatequestion(\"-1\", \"-1\", \"-1\", \"-1\");\n  }\n  // to visible question update model\n  visibleupdatequestion(question_id, subtrackname, subtrackid, body) {\n    this.bodyupdatequestion = body;\n    this.subtrack_id = subtrackid;\n    this.subtrack_name = subtrackname;\n    if (this.textupdatequestion) {\n      this.textupdatequestion = \"\";\n      this.bodyupdatequestion = \"\";\n      this.subtrack_id = \"\";\n      this.subtrack_name = \"\";\n    } else {\n      this.textupdatequestion = question_id;\n    }\n  }\n  // to add new update question in the page\n  addupdatedtoquestions() {\n    this.refresh();\n    this.bodyupdatequestion = \"\";\n    this.subtrack_id = \"\";\n    this.subtrack_name = \"\";\n  }\n  // q comment\n  addnewqcomment(user_id, question_id) {\n    this.service.addnewqcomment(this.bodynewqcomment[question_id], user_id, question_id).subscribe(res => {\n      this.bodynewqcomment[question_id] = \"\";\n      this.refresh();\n    });\n  }\n  updateqcommentbyid(id) {\n    this.service.updateqcommentbyid(id, this.bodyupdateqcomment).subscribe(res => {\n      if (res) {\n        this.addupdatedtoqcomment();\n      }\n    });\n    this.visiabletextupdateqcomment(\"-1\", \"-1\");\n    this.bodyupdateqcomment = \"\";\n    this.refresh();\n  }\n  updatereplybyid(id) {\n    this.service.updatereplybyid(id, this.bodyupdatereply).subscribe(res => {\n      if (res) {\n        this.addupdatedtoreply();\n      }\n    });\n    this.visiabletextupdatereply(\"-1\", \" -1\");\n    this.bodyupdatereply = \"\";\n  }\n  deletequestionbyid(question_id) {\n    if (confirm(\"Are You Sure To Delete This question?\")) {\n      this.service.deletequestionbyid(question_id).subscribe(res => {\n        this.refresh();\n      });\n    }\n  }\n  deleteqcommentbyid(qcomment_id) {\n    if (confirm(\"Are You Sure To Delete This Comment?\")) {\n      this.service.deleteqcommentbyid(qcomment_id).subscribe(res => {\n        this.refresh();\n      });\n    }\n  }\n  deletereplybyid(reply_id) {\n    if (confirm(\"Are You Sure To Delete This Reply?\")) {\n      this.service.deletereplybyid(reply_id).subscribe(res => {\n        this.refresh();\n      });\n    }\n  }\n  showsubtracks() {\n    this.service.showsubtrack().subscribe(res => {\n      this.subtracks = res;\n    });\n  }\n  addsubtrack(id, name) {\n    this.subtrack_name = name;\n    this.subtrack_id = id;\n  }\n  getcomments(question_id) {\n    if (question_id) {\n      if (question_id == this.SQComments) {\n        this.SQComments = \"\";\n      } else {\n        this.SQComments = question_id;\n      }\n    } else {\n      this.SQComments = question_id;\n    }\n  }\n  getrepleis(qcomment_id) {\n    if (qcomment_id) {\n      if (qcomment_id == this.SQCReplies) {\n        this.SQCReplies = \"\";\n      } else {\n        this.SQCReplies = qcomment_id;\n      }\n    } else {\n      this.SQCReplies = qcomment_id;\n    }\n  }\n  addnewreply(user_id, comment_id) {\n    this.service.addnewreply(this.bodynewreply[comment_id], user_id, comment_id).subscribe(res => {\n      if (res) {\n        console.log(res);\n        this.bodynewreply[comment_id] = \"\";\n        this.refresh();\n      }\n    });\n  }\n  visiabletextupdateqcomment(qcomment_id, body) {\n    if (this.textupdateqcomment) {\n      this.textupdateqcomment = \"\";\n    } else {\n      this.textupdateqcomment = qcomment_id;\n      this.bodyupdateqcomment = body;\n    }\n  }\n  visiabletextupdatereply(reply_id, body) {\n    this.bodyupdatereply = body;\n    if (this.textupdatereply) {\n      this.textupdatereply = \"\";\n    } else {\n      this.textupdatereply = reply_id;\n    }\n  }\n  addupdatedtoqcomment() {\n    this.refresh();\n    this.bodyupdatereply = \"\";\n  }\n  addupdatedtoreply() {\n    this.refresh();\n    this.bodyupdatereply = \"\";\n  }\n  trackquetion(index, question) {\n    return question.id;\n  }\n  trackqcomment(index, qcomment) {\n    return qcomment.id;\n  }\n  trackreply(index, reply) {\n    return reply.id;\n  }\n};\nQuestionsviewComponent = __decorate([Component({\n  selector: \"app-questionsview\",\n  templateUrl: \"./questionsview.component.html\",\n  styleUrls: [\"./questionsview.component.css\"],\n  animations: [fade, showfilter, showaddquestion, fadein]\n})], QuestionsviewComponent);\nexport { QuestionsviewComponent };","map":{"version":3,"mappings":"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","names":["Component","FormControl","FormGroup","Validators","fade","showfilter","showaddquestion","fadein","QuestionsviewComponent","constructor","service","ngOnInit","user_logened","localStorage","getItem","JSON","parse","showsubtracks","refresh","formAddQuestion","AddQuestionValidate","getQuestion","search","qusetuinsearch","target","value","subscribe","res","list","data","like","comment_id","like_id","like_user_id","id","removelike","setlike","subtrack_id","undefined","console","log","displaysearch","setwidth","setalighnfilter","alighnfilter","viewtrack","visible","removeformdata","question_body","required","minLength","user_id","savequestion","valid","addquestion","showquestion","onTableDataChange","event","page","onTableSizeChange","tableSize","updatequestionbyid","bodyupdatequestion","addupdatedtoquestions","visibleupdatequestion","question_id","subtrackname","subtrackid","body","subtrack_name","textupdatequestion","addnewqcomment","bodynewqcomment","updateqcommentbyid","bodyupdateqcomment","addupdatedtoqcomment","visiabletextupdateqcomment","updatereplybyid","bodyupdatereply","addupdatedtoreply","visiabletextupdatereply","deletequestionbyid","confirm","deleteqcommentbyid","qcomment_id","deletereplybyid","reply_id","showsubtrack","subtracks","addsubtrack","name","getcomments","SQComments","getrepleis","SQCReplies","addnewreply","bodynewreply","textupdateqcomment","textupdatereply","trackquetion","index","question","trackqcomment","qcomment","trackreply","reply","selector","templateUrl","styleUrls","animations"],"sourceRoot":"","sources":["C:\\Users\\lenovo\\Desktop\\new\\Final-Project-Front-End\\src\\app\\user\\userhome\\questionsview\\questionsview.component.ts"],"sourcesContent":["import { UserHomeService } from \"./../../services/user-home.service\";\nimport { Component, Input, Output } from \"@angular/core\";\nimport { HttpResponse } from \"@angular/common/http\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { fade, showfilter, showaddquestion, fadein } from \"../../animation\";\n\n\n@Component({\n  selector: \"app-questionsview\",\n  templateUrl: \"./questionsview.component.html\",\n  styleUrls: [\"./questionsview.component.css\"],\n  animations: [fade, showfilter, showaddquestion, fadein],\n})\nexport class QuestionsviewComponent {\n  // filter\n  setwidth: string = \"\";\n  alighnfilter = \"right\";\n  alighntrack = \"right\";\n  visible = \"false\";\n  searchFilterTrack: string = \"\";\n  ser = \"\";\n\n  // add Question\n  success = false;\n  subtrack_name = \"\";\n  subtracks: any;\n  public formAddQuestion!: FormGroup;\n\n  // qutestionview\n\n  list: any = [];\n  textupdatequestion = \"\";\n  bodyupdatequestion = \"\";\n  subtrack_id = \"\";\n  bodynewqcomment: string[] = [];\n  bodynewreply: string[] = [];\n  textupdateqcomment = \"\";\n  textupdatereply = \"\";\n  bodyupdatereply = \"\";\n  bodyupdateqcomment = \"\";\n  SQComments: string = \"\";\n  SQCReplies: string = \"\";\n  user_logened :any\n  page: number = 1;\n  count: number = 0;\n  tableSize: number = 5;\n  tableSizes: any = [3, 6, 9, 12];\n\n  constructor(private service: UserHomeService) {}\n  ngOnInit() {\n    this.user_logened = localStorage.getItem(\"user\")\n    this.user_logened = JSON.parse(this.user_logened)\n    this.showsubtracks();\n    this.refresh();\n    this.formAddQuestion = this.AddQuestionValidate();\n  }\n\n  refresh() {\n    this.getQuestion();\n  }\n\n  search(search: Event) {\n    let qusetuinsearch = (search?.target as HTMLInputElement)?.value;\n    this.service.search(qusetuinsearch).subscribe(res=>{this.list = res.data})\n  }\n\n  like(comment_id:string, like_id:string,like_user_id:string){\n    if(like_user_id==this.user_logened.id){\n      this.service.removelike(like_id).subscribe(res=>{this.refresh()})\n    }else{\n      this.service.setlike(comment_id,this.user_logened.id).subscribe(res=>{this.refresh()})\n    }\n  }\n  showfilter(value: Event) {\n    let subtrack_id = (value?.target as HTMLInputElement)?.value;\n    if (subtrack_id != undefined) {\n      this.service.showfilter(subtrack_id).subscribe((res) => {\n        this.list = res.data;\n        console.log(this.list);\n      });\n      console.log(subtrack_id);\n    } else {\n      this.refresh();\n    }\n  }\n\n  displaysearch() {\n    if (this.setwidth == \"\") {\n      this.setwidth = \"setwidth\";\n    } else {\n      this.setwidth = \"\";\n    }\n  }\n\n  setalighnfilter(id: Event) {\n    if (this.alighnfilter == \"right\") {\n      this.alighnfilter = \"down\";\n    } else {\n      this.showfilter(id);\n      this.alighnfilter = \"right\";\n    }\n  }\n\n  viewtrack() {\n    if (this.visible == \"false\") {\n      this.visible = \"true\";\n    } else {\n      this.visible = \"false\";\n    }\n  }\n\n  // endfilter\n\n  // Addquestion\n\n  private removeformdata() {\n    this.formAddQuestion = this.AddQuestionValidate();\n  }\n\n  private AddQuestionValidate(): FormGroup {\n    return new FormGroup({\n      question_body: new FormControl(\"\", [\n        Validators.required,\n        Validators.minLength(10),\n      ]),\n      subtrack_id: new FormControl(\"\", [Validators.required]),\n      user_id: new FormControl(\"3\", [Validators.required]),\n    });\n  }\n\n  savequestion() {\n    console.log(this.formAddQuestion.value);\n    if (this.formAddQuestion.valid) {\n      console.log(this.formAddQuestion.value);\n      this.service.addquestion(this.formAddQuestion.value).subscribe((res) => {\n        this.refresh();\n        this.removeformdata();\n      });\n    }\n  }\n\n  // end add question\n\n  // to get all question\n  getQuestion() {\n    this.service.showquestion().subscribe((res) => {\n      this.list = res.data;\n    });\n  }\n\n  onTableDataChange(event: any) {\n    this.page = event;\n    this.getQuestion();\n  }\n  onTableSizeChange(event: any): void {\n    this.tableSize = event.target.value;\n    this.page = 1;\n    this.getQuestion();\n  }\n\n  // to excute the question updateting in database\n  updatequestionbyid(id: string) {\n    this.service\n      .updatequestionbyid(id, this.bodyupdatequestion, this.subtrack_id)\n      .subscribe((res) => {\n        if (res) {\n          this.addupdatedtoquestions();\n        }\n      });\n    this.visibleupdatequestion(\"-1\", \"-1\", \"-1\", \"-1\");\n  }\n\n  // to visible question update model\n  visibleupdatequestion(\n    question_id: string,\n    subtrackname: string,\n    subtrackid: string,\n    body: string\n  ) {\n    this.bodyupdatequestion = body;\n    this.subtrack_id = subtrackid;\n    this.subtrack_name = subtrackname;\n\n    if (this.textupdatequestion) {\n      this.textupdatequestion = \"\";\n      this.bodyupdatequestion = \"\";\n      this.subtrack_id = \"\";\n      this.subtrack_name = \"\";\n    } else {\n      this.textupdatequestion = question_id;\n    }\n  }\n\n  // to add new update question in the page\n  private addupdatedtoquestions() {\n    this.refresh();\n    this.bodyupdatequestion = \"\";\n    this.subtrack_id = \"\";\n    this.subtrack_name = \"\";\n  }\n  // q comment\n\n  addnewqcomment(user_id: string, question_id: number) {\n    this.service\n      .addnewqcomment(this.bodynewqcomment[question_id], user_id, question_id)\n      .subscribe(res => {\n          this.bodynewqcomment[question_id] = \"\";\n          this.refresh();\n      });\n  }\n\n  updateqcommentbyid(id: string) {\n    this.service\n      .updateqcommentbyid(id, this.bodyupdateqcomment)\n      .subscribe((res) => {\n        if (res) {\n          this.addupdatedtoqcomment();\n        }\n      });\n    this.visiabletextupdateqcomment(\"-1\", \"-1\");\n    this.bodyupdateqcomment = \"\";\n    this.refresh();\n  }\n\n  updatereplybyid(id: string) {\n    this.service.updatereplybyid(id, this.bodyupdatereply).subscribe((res) => {\n      if (res) {\n        this.addupdatedtoreply();\n      }\n    });\n    this.visiabletextupdatereply(\"-1\", \" -1\");\n    this.bodyupdatereply = \"\";\n  }\n  deletequestionbyid(question_id: string) {\n    if (confirm(\"Are You Sure To Delete This question?\")) {\n      this.service.deletequestionbyid(question_id).subscribe((res) => {\n        this.refresh();\n      });\n    }\n  }\n\n  deleteqcommentbyid(qcomment_id: string) {\n    if (confirm(\"Are You Sure To Delete This Comment?\")) {\n      this.service.deleteqcommentbyid(qcomment_id).subscribe((res) => {\n        this.refresh();\n      });\n    }\n  }\n  deletereplybyid(reply_id: string) {\n    if (confirm(\"Are You Sure To Delete This Reply?\")) {\n      this.service.deletereplybyid(reply_id).subscribe((res) => {\n        this.refresh();\n      });\n    }\n  }\n\n  showsubtracks() {\n    this.service.showsubtrack().subscribe((res) => {\n      this.subtracks = res;\n    });\n  }\n\n  addsubtrack(id: string, name: string) {\n    this.subtrack_name = name;\n    this.subtrack_id = id;\n  }\n\n  getcomments(question_id: string) {\n    if (question_id) {\n      if (question_id == this.SQComments) {\n        this.SQComments = \"\";\n      } else {\n        this.SQComments = question_id;\n      }\n    } else {\n      this.SQComments = question_id;\n    }\n  }\n  getrepleis(qcomment_id: string) {\n    if (qcomment_id) {\n      if (qcomment_id == this.SQCReplies) {\n        this.SQCReplies = \"\";\n      } else {\n        this.SQCReplies = qcomment_id;\n      }\n    } else {\n      this.SQCReplies = qcomment_id;\n    }\n  }\n\n  addnewreply(user_id: string, comment_id: number) {\n    this.service\n      .addnewreply(this.bodynewreply[comment_id], user_id, comment_id)\n      .subscribe((res) => {\n        if (res) {\n          console.log(res);\n          this.bodynewreply[comment_id] = \"\";\n          this.refresh();\n        }\n      });\n  }\n\n  visiabletextupdateqcomment(qcomment_id: string, body: string) {\n    if (this.textupdateqcomment) {\n      this.textupdateqcomment = \"\";\n    } else {\n      this.textupdateqcomment = qcomment_id;\n      this.bodyupdateqcomment = body;\n    }\n  }\n\n  visiabletextupdatereply(reply_id: string, body: string) {\n    this.bodyupdatereply = body;\n\n    if (this.textupdatereply) {\n      this.textupdatereply = \"\";\n    } else {\n      this.textupdatereply = reply_id;\n    }\n  }\n\n  addupdatedtoqcomment() {\n    this.refresh();\n    this.bodyupdatereply = \"\";\n  }\n\n  addupdatedtoreply() {\n    this.refresh();\n    this.bodyupdatereply = \"\";\n  }\n\n  trackquetion(index: number, question: any): string {\n    return question.id;\n  }\n\n  trackqcomment(index: number, qcomment: any): string {\n    return qcomment.id;\n  }\n\n  trackreply(index: number, reply: any): string {\n    return reply.id;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}