{"ast":null,"code":"export class CustomValidators {\n  constructor() {\n    // If validator has no parameters\n    this.passwordMatch = frmGroup => {\n      let passControl = frmGroup.get('password');\n      let confirmPassControl = frmGroup.get('confirmPassword');\n      if (!passControl || !confirmPassControl || !passControl.value || !confirmPassControl.value) return null;\n      let valErr = {\n        'UnmatchedPassword': {\n          'pass': passControl?.value,\n          'confrim': confirmPassControl?.value\n        }\n      };\n      return passControl?.value == confirmPassControl?.value ? null : valErr;\n    };\n  }\n  passwordMatchAdv(complexPassword = false) {\n    //If complextPassword?, check fullname not included in password\n    return control => {\n      let passControl = control.get('password');\n      let confirmPassControl = control.get('confirmPassword');\n      if (!passControl || !confirmPassControl || !passControl.value || !confirmPassControl.value) return null;\n      let valErr = {\n        'UnmatchedPassword': {\n          'pass': passControl?.value,\n          'confrim': confirmPassControl?.value\n        }\n      };\n      return passControl?.value == confirmPassControl?.value ? null : valErr;\n    };\n  }\n}","map":{"version":3,"mappings":"AAIA,OAAM,MAAOA,gBAAgB;EAA7BC;IACA;IACC,kBAAa,GACXC,QAAyB,IAA6B;MACrD,IAAIC,WAAW,GAAED,QAAQ,CAACE,GAAG,CAAC,UAAU,CAAC;MACzC,IAAIC,kBAAkB,GAAEH,QAAQ,CAACE,GAAG,CAAC,iBAAiB,CAAC;MACvD,IAAG,CAACD,WAAW,IAAI,CAACE,kBAAkB,IAAI,CAACF,WAAW,CAACG,KAAK,IAAI,CAACD,kBAAkB,CAACC,KAAK,EACvF,OAAO,IAAI;MAEb,IAAIC,MAAM,GAAC;QAAC,mBAAmB,EAAE;UAAC,MAAM,EAAEJ,WAAW,EAAEG,KAAK;UAAE,SAAS,EAAED,kBAAkB,EAAEC;QAAK;MAAC,CAAC;MACpG,OAAQH,WAAW,EAAEG,KAAK,IAAED,kBAAkB,EAAEC,KAAK,GAAG,IAAI,GAAGC,MAAM;IACvE,CAAC;EAgBD;EAdAC,gBAAgB,CAACC,kBAAyB,KAAK;IAE7C;IACA,OAAQC,OAAwB,IAA6B;MAC3D,IAAIP,WAAW,GAAEO,OAAO,CAACN,GAAG,CAAC,UAAU,CAAC;MACxC,IAAIC,kBAAkB,GAAEK,OAAO,CAACN,GAAG,CAAC,iBAAiB,CAAC;MACtD,IAAG,CAACD,WAAW,IAAI,CAACE,kBAAkB,IAAI,CAACF,WAAW,CAACG,KAAK,IAAI,CAACD,kBAAkB,CAACC,KAAK,EACvF,OAAO,IAAI;MAEb,IAAIC,MAAM,GAAC;QAAC,mBAAmB,EAAE;UAAC,MAAM,EAAEJ,WAAW,EAAEG,KAAK;UAAE,SAAS,EAAED,kBAAkB,EAAEC;QAAK;MAAC,CAAC;MACpG,OAAQH,WAAW,EAAEG,KAAK,IAAED,kBAAkB,EAAEC,KAAK,GAAG,IAAI,GAAGC,MAAM;IACvE,CAAC;EACH","names":["CustomValidators","constructor","frmGroup","passControl","get","confirmPassControl","value","valErr","passwordMatchAdv","complexPassword","control"],"sourceRoot":"","sources":["C:\\Users\\lenovo\\Desktop\\new\\Final-Project-Front-End\\src\\app\\auth\\custom-validators.ts"],"sourcesContent":["\r\n import {  FormGroup ,AbstractControl, ValidationErrors, ValidatorFn} from '@angular/forms';\r\n\r\n\r\nexport class CustomValidators {\r\n// If validator has no parameters\r\n passwordMatch: ValidatorFn =\r\n  (frmGroup: AbstractControl): ValidationErrors | null => {\r\n    let passControl= frmGroup.get('password');\r\n    let confirmPassControl= frmGroup.get('confirmPassword');\r\n    if(!passControl || !confirmPassControl || !passControl.value || !confirmPassControl.value)\r\n      return null;\r\n\r\n    let valErr={'UnmatchedPassword': {'pass': passControl?.value, 'confrim': confirmPassControl?.value}}\r\n    return (passControl?.value==confirmPassControl?.value)? null : valErr;\r\n  }\r\n\r\n  passwordMatchAdv(complexPassword: boolean=false): ValidatorFn\r\n  {\r\n    //If complextPassword?, check fullname not included in password\r\n    return (control: AbstractControl) : ValidationErrors | null=>{\r\n      let passControl= control.get('password');\r\n      let confirmPassControl= control.get('confirmPassword');\r\n      if(!passControl || !confirmPassControl || !passControl.value || !confirmPassControl.value)\r\n        return null;\r\n\r\n      let valErr={'UnmatchedPassword': {'pass': passControl?.value, 'confrim': confirmPassControl?.value}}\r\n      return (passControl?.value==confirmPassControl?.value)? null : valErr;\r\n    }\r\n  }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}